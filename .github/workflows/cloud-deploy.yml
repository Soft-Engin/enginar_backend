name: AWS Deploy

on:
  workflow_dispatch:
    inputs:
      terraform_action:
        type: choice
        description: Select which terraform action to perform.
        options:
        - test
        - apply
        - destroy
        required: true
  push:
    tags:
     - v*

jobs:
  terraform:
    name: Terraform Provisioning
    runs-on: self-hosted
    defaults:
      run:
        working-directory: ./deployment/terraform
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY }}
    outputs:
      ec2_public_ip: ${{ steps.output.outputs.ec2_public_ip }}

    steps:
    - name: Checkout Repository
      id: checkout
      uses: actions/checkout@v4

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Setup
      id: setup
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.10.3
    
    # Terraform format command is used to rewrite Terraform configuration files to a canonical format and style.
    - name: Terraform Formatter
      id: fmt
      run: terraform fmt -check

    # Terraform Init command is used to initialize a working directory containing Terraform configuration files.
    - name: Terraform Init
      id: init
      run: terraform init

    # Terraform Validate command is used to validate the configuration files in a directory.
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
    
    # Terraform Plan command is used to create an execution plan.
    - name: Terraform Plan
      id: plan
      run: |
        if [[ "${{ github.event.inputs.terraform_action }}" == "destroy" ]]; then
          terraform plan -destroy -no-color
        else
          terraform plan -no-color
        fi
    
    # Terraform Apply command is used to apply the changes required to reach the desired state of the configuration.
    - name: Terraform Apply
      id: apply
      if: ${{ github.event.inputs.terraform_action == 'apply' }}
      run: terraform apply -auto-approve
    
    # Terraform Destroy command is used to destroy the Terraform-managed infrastructure.
    - name: Terraform destroy
      id: destroy
      if: ${{ github.event.inputs.terraform_action == 'destroy' }}
      run: terraform destroy -auto-approve

    # Output the EC2 Public IP  
    - name: Output EC2 Public IP
      id: output
      if: ${{ github.event.inputs.terraform_action == 'apply' }}
      run: echo "ec2_public_ip=$(terraform output -raw ec2_public_ip)" >> $GITHUB_OUTPUT