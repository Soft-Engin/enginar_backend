#!/bin/sh

# Enforce branch merge rules and prevent force pushes to 'main' and 'dev'.

# Define allowed branch prefixes
main_allowed_prefixes="^hotfix/|^release/"
dev_allowed_prefixes="^feature/|^release/|^hotfix/|^bugfix/"

# Zero hash for new branches or deleted branches
zero=$(git hash-object --stdin </dev/null | tr '0-9a-f' '0')

# Get the current branch being pushed
branch_name=$(git rev-parse --abbrev-ref HEAD)

# Process each branch being pushed
while read local_ref local_oid remote_ref remote_oid
do
    # Skip deleted branches
    if [ "$local_oid" = "$zero" ]; then
        continue
    fi

    # Check for force push
    if [ "$remote_oid" != "$zero" ]; then
        if ! git merge-base --is-ancestor "$remote_oid" "$local_oid"; then
            echo >&2 "ERROR: Force pushes are not allowed to '$remote_ref'."
            exit 1
        fi
    fi

    # Enforce rules for 'main' and 'dev' branches
    case "$remote_ref" in
        refs/heads/main)
            if ! echo "$branch_name" | grep -Eq "$main_allowed_prefixes"; then
                echo >&2 "ERROR: Push to 'main' is only allowed by opening PR from branches starting with 'hotfix/' or 'release/'."
                exit 1
            fi
            ;;
        refs/heads/dev)
            if ! echo "$branch_name" | grep -Eq "$dev_allowed_prefixes"; then
                echo >&2 "ERROR: Push to 'dev' is only allowed by opening PR from branches starting with 'feature/', 'release/', 'hotfix/' or 'bugfix/'."
                exit 1
            fi
            ;;
    esac
done

echo "Push allowed."
exit 0
